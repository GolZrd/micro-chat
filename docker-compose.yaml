volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge

services:
  auth:
    build:
      context: ./auth
      dockerfile: Dockerfile
    ports:
      - "${GRPC_AUTH_PORT}:50051"
    environment:
      - DB_HOST=${PG_HOST}
      - DB_PORT=${PG_PORT}
      - DB_USER=${PG_USER}
      - DB_PASSWORD=${PG_PASSWORD}
      - DB_NAME=${DB_AUTH_NAME}
      - GRPC_PORT=${GRPC_AUTH_PORT}
    depends_on:
      - postgres
    networks:
      - app-network
  
  chat-server:
    build:
      context: ./chat-server
      dockerfile: Dockerfile
    ports:
      - "${GRPC_CHAT_PORT}:50052"
    environment:
      - DB_HOST=${PG_HOST}
      - DB_PORT=${PG_PORT}
      - DB_USER=${PG_USER}
      - DB_PASSWORD=${PG_PASSWORD}
      - DB_NAME=${DB_CHAT_NAME}
      - GRPC_PORT=${GRPC_CHAT_PORT}
    depends_on:
      - postgres
      - auth
    networks:
      - app-network
  
  migrator-auth:
    image: migrate/migrate:4  # Готовый образ
    command:
      - -source
      - file:///migrations  # Путь внутри контейнера
      - -database
      - postgresql://${PG_USER}:${PG_PASSWORD}@${PG_HOST}:${PG_PORT}/${DB_AUTH_NAME}?sslmode=disable # Параметры подключения
      - up
    volumes:
      - ./auth/migrations:/migrations:ro 
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  migrator-chat:
    image: migrate/migrate:4  # Готовый образ
    command:
      - -source
      - file:///migrations  # Путь внутри контейнера
      - -database
      - postgresql://${PG_USER}:${PG_PASSWORD}@${PG_HOST}:${PG_PORT}/${DB_CHAT_NAME}?sslmode=disable # Параметры подключения
      - up 
    volumes:
      - ./chat-server/migrations:/migrations:ro 
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - app-network

  postgres:
    image: postgres:17-alpine3.22
    environment:
      - "POSTGRES_DB=${PG_NAME}"
      - "POSTGRES_USER=${PG_USER}"
      - "POSTGRES_PASSWORD=${PG_PASSWORD}"
    ports:
      - "${PG_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_NAME}"]
      interval: 5s
      retries: 5
      timeout: 5s