// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–æ–∫–µ–Ω–∞–º–∏
const TokenManager = {
    // –ü–æ–ª—É—á–∏—Ç—å access token –∏–∑ localStorage
    getAccessToken() {
        return localStorage.getItem('access_token');
    },
    
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å access token
    setAccessToken(token) {
        localStorage.setItem('access_token', token);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º username –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try {
            const claims = this.decodeJWT(token);
            localStorage.setItem('username', claims.name);
            console.log('‚úÖ Username extracted:', claims.name);
        } catch (e) {
            console.error('‚ùå Failed to decode token:', e);
        }
    },
    
    // Frontend –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT –¥–ª—è UI
    decodeJWT(token) {
        const base64Url = token.replace('Bearer ', '').split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        return JSON.parse(atob(base64));
    },
    
    getUsername() {
        return localStorage.getItem('username');
    },
    
    // –£–¥–∞–ª–∏—Ç—å access token
    removeAccessToken() {
        localStorage.removeItem('access_token');
    },
    
    // –ü–æ–ª—É—á–∏—Ç—å user_id
    getUserId() {
        return localStorage.getItem('user_id');
    },
    
    setUserId(id) {
        localStorage.setItem('user_id', id);
    },
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    isAuthenticated() {
        return !!this.getAccessToken();
    },
    
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    clear() {
        localStorage.removeItem('access_token');
        localStorage.removeItem('user_id');
        localStorage.removeItem('username');
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token
async function refreshAccessToken() {
    try {
        console.log('üîÑ Refreshing access token...');
        
        const response = await fetch('/api/refresh', {
            method: 'POST',
            credentials: 'include' // –í–∞–∂–Ω–æ! –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç refresh_token cookie
        });
        
        if (response.ok) {
            const data = await response.json();
            
            if (data.access_token) {
                // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Bearer
                let accessToken = data.access_token;
                if (!accessToken.startsWith('Bearer ')) {
                    accessToken = 'Bearer ' + accessToken;
                }
                
                TokenManager.setAccessToken(accessToken);
                console.log('‚úÖ Access token refreshed successfully');
                return true;
            } else {
                console.error('‚ùå No access_token in response');
                return false;
            }
        } else {
            const error = await response.json();
            console.error('‚ùå Refresh failed:', error.error);
            return false;
        }
    } catch (error) {
        console.error('‚ùå Error refreshing token:', error);
        return false;
    }
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞
async function apiRequest(url, options = {}) {
    const token = TokenManager.getAccessToken();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    const headers = {
        'Content-Type': 'application/json',
        ...options.headers
    };
    
    if (token) {
        headers['Authorization'] = token; // –¢–æ–∫–µ–Ω —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "Bearer "
    }
    
    let response = await fetch(url, {
        ...options,
        headers,
        credentials: 'include' // –í–∞–∂–Ω–æ –¥–ª—è cookies!
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º 401 (Unauthorized) –∏–ª–∏ 403 (PermissionDenied –æ—Ç gRPC)
    if ((response.status === 401 || response.status === 403) && token) {
        console.log('‚ö†Ô∏è Access token expired (status ' + response.status + '), attempting refresh...');
        
        // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        const refreshed = await refreshAccessToken();
        
        if (refreshed) {
            // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
            headers['Authorization'] = TokenManager.getAccessToken();
            response = await fetch(url, {
                ...options,
                headers,
                credentials: 'include'
            });
            
            console.log('‚úÖ Request retried with new token');
        } else {
            // –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å
            console.error('‚ùå Failed to refresh token, logging out...');
            TokenManager.clear();
            updateAuthStatus();
            alert('‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.');
            window.location.href = '/';
            throw new Error('Session expired');
        }
    }
    
    return response;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
async function checkTokenOnLoad() {
    if (!TokenManager.isAuthenticated()) {
        return;
    }

    try {
        // –î–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
        const response = await fetch('/api/chat/my', {
            method: 'GET',
            headers: {
                'Authorization': TokenManager.getAccessToken()
            },
            credentials: 'include'
        });

        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å
        if (response.status === 401 || response.status === 403) {
            console.log('‚ö†Ô∏è Token expired on page load, refreshing...');
            
            const refreshed = await refreshAccessToken();
            
            if (!refreshed) {
                console.log('‚ùå Could not refresh token, logging out');
                TokenManager.clear();
                updateAuthStatus();
            } else {
                console.log('‚úÖ Token refreshed on page load');
                updateAuthStatus();
            }
        }
    } catch (error) {
        console.error('‚ùå Error checking token:', error);
    }
}


// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º username –≤–º–µ—Å—Ç–æ user_id
function updateAuthStatus() {
    const isAuth = TokenManager.isAuthenticated();
    const statusEl = document.getElementById('status');
    const logoutBtn = document.getElementById('logoutBtn');
    const protectedContent = document.querySelectorAll('.protected-content');
    const guestOnly = document.querySelectorAll('.guest-only'); // ‚úÖ –ù–û–í–û–ï
    
    if (isAuth) {
        const username = TokenManager.getUsername();
        const userId = TokenManager.getUserId();
        
        statusEl.innerHTML = `‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫ <strong>${username}</strong> <small>(ID: ${userId})</small>`;
        statusEl.style.color = 'green';
        logoutBtn.style.display = 'inline-block';
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        protectedContent.forEach(el => el.style.display = 'block');
        
        // ‚úÖ –ù–û–í–û–ï: –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
        guestOnly.forEach(el => el.style.display = 'none');
    } else {
        statusEl.textContent = '‚ùå –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω';
        statusEl.style.color = 'red';
        logoutBtn.style.display = 'none';
        
        // –°–∫—Ä—ã–≤–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        protectedContent.forEach(el => el.style.display = 'none');
        
        // ‚úÖ –ù–û–í–û–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
        guestOnly.forEach(el => el.style.display = 'block');
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
document.getElementById('registerForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const data = {
        name: document.getElementById('reg_name').value,
        email: document.getElementById('reg_email').value,
        password: document.getElementById('reg_password').value,
        password_confirm: document.getElementById('reg_password_confirm').value
    };

    try {
        const response = await fetch('/api/register', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        const resultEl = document.getElementById('registerResult');
        
        if (response.ok) {
            resultEl.innerHTML = `‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.`;
            resultEl.style.background = '#d4edda';
            resultEl.style.color = '#155724';
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('registerForm').reset();
        } else {
            resultEl.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${result.error}`;
            resultEl.style.background = '#f8d7da';
            resultEl.style.color = '#721c24';
        }
    } catch (error) {
        document.getElementById('registerResult').innerHTML = `‚ùå ${error}`;
    }
});

// –í—Ö–æ–¥
document.getElementById('loginForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const data = {
        email: document.getElementById('login_email').value,
        password: document.getElementById('login_password').value
    };

    try {
        const response = await fetch('/api/login', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            credentials: 'include',
            body: JSON.stringify(data)
        });
        
        const result = await response.json();
        const resultEl = document.getElementById('loginResult');
        
        if (response.ok) {
            // ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ç–æ–∫–µ–Ω —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º Bearer
            let accessToken = result.access_token;
            if (!accessToken.startsWith('Bearer ')) {
                accessToken = 'Bearer ' + accessToken;
            }
            
            TokenManager.setAccessToken(accessToken);
            TokenManager.setUserId(result.user_id);
            
            resultEl.innerHTML = `‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${TokenManager.getUsername()}!`;
            resultEl.style.background = '#d4edda';
            resultEl.style.color = '#155724';
            
            updateAuthStatus();
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('loginForm').reset();
        } else {
            resultEl.innerHTML = `‚ùå –û—à–∏–±–∫–∞: ${result.error}`;
            resultEl.style.background = '#f8d7da';
            resultEl.style.color = '#721c24';
        }
    } catch (error) {
        document.getElementById('loginResult').innerHTML = `‚ùå ${error}`;
    }
});

// ‚úÖ –ò–ó–ú–ï–ù–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º TokenManager.clear()
async function logout() {
    try {
        await fetch('/api/logout', {
            method: 'POST',
            credentials: 'include'
        });
        
        TokenManager.clear();
        updateAuthStatus();
        alert('‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        location.reload();
    } catch (error) {
        alert('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: ' + error);
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–∞
document.getElementById('createChatForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const usernames = document.getElementById('chat_usernames').value.split(',').map(s => s.trim());

    try {
        const response = await apiRequest('/api/chat/create', {
            method: 'POST',
            body: JSON.stringify({usernames})
        });
        
        const result = await response.json();
        const resultEl = document.getElementById('chatResult');
        
        if (response.ok) {
            resultEl.innerHTML = `‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω! <a href="/chat?id=${result.chat_id}" style="color: #007bff;">–û—Ç–∫—Ä—ã—Ç—å ‚Üí</a>`;
            resultEl.style.background = '#d4edda';
            resultEl.style.color = '#155724';
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('chat_usernames').value = '';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω
            loadMyChats();
        } else {
            resultEl.innerHTML = `‚ùå ${result.error}`;
            resultEl.style.background = '#f8d7da';
            resultEl.style.color = '#721c24';
        }
    } catch (error) {
        document.getElementById('chatResult').innerHTML = `‚ùå ${error}`;
    }
});

// ‚úÖ –ù–û–í–û–ï: –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞
async function deleteChat(chatId) {
    if (!confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —á–∞—Ç #${chatId}?`)) {
        return;
    }

    // –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —á–∞—Ç–∞
    const chatCard = event.target.closest('.chat-card');
    
    try {
        // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è
        if (chatCard) {
            chatCard.style.opacity = '0.5';
            chatCard.style.pointerEvents = 'none';
        }

        const response = await apiRequest(`/api/chat/delete/${chatId}`, {
            method: 'DELETE'
        });
        
        if (response.ok) {
            // –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
            if (chatCard) {
                chatCard.classList.add('deleting');
                setTimeout(() => {
                    loadMyChats(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                }, 300);
            } else {
                loadMyChats();
            }
        } else {
            const error = await response.json();
            alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + (error.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if (chatCard) {
                chatCard.style.opacity = '1';
                chatCard.style.pointerEvents = 'auto';
            }
        }
    } catch (error) {
        console.error('‚ùå Delete error:', error);
        alert('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞: ' + error.message);
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if (chatCard) {
            chatCard.style.opacity = '1';
            chatCard.style.pointerEvents = 'auto';
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
async function loadMyChats() {
    const chatsDiv = document.getElementById('myChats');
    chatsDiv.innerHTML = '<p style="color: #666;">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>';
    
    try {
        const response = await apiRequest('/api/chat/my');
        const data = await response.json();
        
        console.log('üì¶ Server response:', data);
        
        if (!response.ok) {
            chatsDiv.innerHTML = `<p style="color: #dc3545;">‚ùå ${data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏'}</p>`;
            return;
        }
        
        let chats = data.chats || [];
        chats = chats.filter(chat => chat && chat.id);
        
        console.log('‚úÖ Filtered chats:', chats);
        
        if (chats.length === 0) {
            chatsDiv.innerHTML = '<p style="color: #666;">üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!</p>';
            return;
        }
        
        let html = '<div class="chats-list">';
        chats.forEach(chat => {
            const chatId = chat.id;
            const users = chat.usernames || [];
            
            let createdDate = 'N/A';
            if (chat.created_at && chat.created_at.seconds) {
                const timestamp = chat.created_at.seconds * 1000;
                const date = new Date(timestamp);
                createdDate = date.toLocaleString('ru-RU', {
                    day: 'numeric',
                    month: 'short',
                    hour: '2-digit',
                    minute: '2-digit'
                });
            }
            
            const usersList = users.join(', ');
            
            html += `
                <div class="chat-card">
                    <div class="chat-card-header">
                        <h3>üí¨ –ß–∞—Ç #${chatId}</h3>
                        <button 
                            onclick="deleteChat(${chatId})" 
                            class="btn-delete"
                            title="–£–¥–∞–ª–∏—Ç—å —á–∞—Ç">
                            üóëÔ∏è
                        </button>
                    </div>
                    <p><strong>üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:</strong> ${usersList}</p>
                    <p><strong>üìÖ –°–æ–∑–¥–∞–Ω:</strong> ${createdDate}</p>
                    <a href="/chat?id=${chatId}" class="btn-open-chat">
                       –û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç ‚Üí
                    </a>
                </div>
            `;
        });
        html += '</div>';
        
        chatsDiv.innerHTML = html;
        
    } catch (error) {
        console.error('‚ùå Error:', error);
        chatsDiv.innerHTML = `<p style="color: #dc3545;">‚ùå –û—à–∏–±–∫–∞: ${error.message}</p>`;
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async function loadUserInfo() {
    const userId = TokenManager.getUserId();
    if (!userId) {
        alert('User ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    const infoDiv = document.getElementById('userInfo');
    infoDiv.innerHTML = '<p style="color: #666;">‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>';

    try {
        const response = await apiRequest(`/api/user/${userId}`);
        const user = await response.json();
        
        if (!response.ok) {
            infoDiv.innerHTML = `<p style="color: #dc3545;">‚ùå ${user.error}</p>`;
            return;
        }
        
        infoDiv.innerHTML = `
            <div class="user-info-card">
                <p><strong>üÜî ID:</strong> ${user.id}</p>
                <p><strong>üë§ –ò–º—è:</strong> ${user.name}</p>
                <p><strong>üìß Email:</strong> ${user.email}</p>
                <p><strong>üé≠ –†–æ–ª—å:</strong> ${user.role}</p>
                <p><strong>üìÖ –°–æ–∑–¥–∞–Ω:</strong> ${new Date(user.created_at).toLocaleString('ru-RU')}</p>
            </div>
        `;
    } catch (error) {
        infoDiv.innerHTML = `<p style="color: #dc3545;">‚ùå ${error}</p>`;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    updateAuthStatus();
    checkTokenOnLoad(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
});