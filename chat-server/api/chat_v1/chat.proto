syntax = "proto3";

package chat_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option go_package = "github.com/GolZrd/micro-chat/chat-server/pkg/chat_v1:chat_v1";

service Chat {
    rpc Create(CreateRequest) returns (CreateResponse);            // Create - ручка создания нового чата. 
    rpc Delete(DeleteRequest) returns (google.protobuf.Empty);             // Delete - удаление чата из системы по его идентификатору. 
    rpc SendMessage(SendMessageRequest) returns (google.protobuf.Empty);   // SendMessage - ручка отправки сообщения на сервер. Обновление: так как у нас есть токен, то нам не нужно передавать имя пользователя, мы будем брать его из токена.
    rpc ConnectChat(ConnectChatRequest) returns (stream Message);          // ConnectChat - стриминговая ручка подключения к чату.
    rpc MyChats(MyChatsRequest) returns (MyChatsResponse);         // MyChats - ручка получения списка чатов пользователя. Не будем передавать имя пользователя. А будем его брать из токена
}

message CreateRequest {
    repeated string usernames = 1;
}

message CreateResponse {
    int64 chat_id = 1;
}

message DeleteRequest {
    int64 id = 1;
}
// Убрал поле From, так как мы с каждым запросом передаем токен, из которого будет извлекаться username
message SendMessageRequest {
    int64 chat_id = 1;
    string text = 3;
    google.protobuf.Timestamp created_at = 4;
}

message ConnectChatRequest {
    int64 chat_id = 1;
}

message Message {
    string from = 1;
    string text = 2;
    google.protobuf.Timestamp created_at = 3;
}

// Так как нам не нужно передавать имя, то сообщение можно оставить пустым, и если вдруг, в будущем потребуется дополнить сообщение, то это будет сделать проще
message MyChatsRequest {
}

message ChatInfo {
    int64 id = 1;
    repeated string usernames = 2;
    google.protobuf.Timestamp created_at = 3;
}

message MyChatsResponse {
    repeated ChatInfo chats = 1;
}